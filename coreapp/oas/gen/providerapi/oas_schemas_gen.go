// Code generated by ogen, DO NOT EDIT.

package providerapi

import (
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

type ApiKeyAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/devices.DeviceDataUpdateResponse
type DevicesDeviceDataUpdateResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *DevicesDeviceDataUpdateResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *DevicesDeviceDataUpdateResponse) SetMessage(val string) {
	s.Message = val
}

func (*DevicesDeviceDataUpdateResponse) patchDeviceInfoRes()   {}
func (*DevicesDeviceDataUpdateResponse) patchDeviceStatusRes() {}

// Ref: #/components/schemas/devices.DeviceInfoUpdate
type DevicesDeviceInfoUpdate struct {
	// Calibration_data and n_nodes etc. Make sure that the value is a valid JSON data.
	DeviceInfo NilString `json:"device_info"`
	// Parameter mandatory and valid if calibrationData not null.
	CalibratedAt OptNilDateTime `json:"calibrated_at"`
}

// GetDeviceInfo returns the value of DeviceInfo.
func (s *DevicesDeviceInfoUpdate) GetDeviceInfo() NilString {
	return s.DeviceInfo
}

// GetCalibratedAt returns the value of CalibratedAt.
func (s *DevicesDeviceInfoUpdate) GetCalibratedAt() OptNilDateTime {
	return s.CalibratedAt
}

// SetDeviceInfo sets the value of DeviceInfo.
func (s *DevicesDeviceInfoUpdate) SetDeviceInfo(val NilString) {
	s.DeviceInfo = val
}

// SetCalibratedAt sets the value of CalibratedAt.
func (s *DevicesDeviceInfoUpdate) SetCalibratedAt(val OptNilDateTime) {
	s.CalibratedAt = val
}

// Ref: #/components/schemas/devices.DeviceStatusUpdate
type DevicesDeviceStatusUpdate struct {
	Status DevicesDeviceStatusUpdateStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *DevicesDeviceStatusUpdate) GetStatus() DevicesDeviceStatusUpdateStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *DevicesDeviceStatusUpdate) SetStatus(val DevicesDeviceStatusUpdateStatus) {
	s.Status = val
}

type DevicesDeviceStatusUpdateStatus string

const (
	DevicesDeviceStatusUpdateStatusAvailable   DevicesDeviceStatusUpdateStatus = "available"
	DevicesDeviceStatusUpdateStatusUnavailable DevicesDeviceStatusUpdateStatus = "unavailable"
)

// AllValues returns all DevicesDeviceStatusUpdateStatus values.
func (DevicesDeviceStatusUpdateStatus) AllValues() []DevicesDeviceStatusUpdateStatus {
	return []DevicesDeviceStatusUpdateStatus{
		DevicesDeviceStatusUpdateStatusAvailable,
		DevicesDeviceStatusUpdateStatusUnavailable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DevicesDeviceStatusUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case DevicesDeviceStatusUpdateStatusAvailable:
		return []byte(s), nil
	case DevicesDeviceStatusUpdateStatusUnavailable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DevicesDeviceStatusUpdateStatus) UnmarshalText(data []byte) error {
	switch DevicesDeviceStatusUpdateStatus(data) {
	case DevicesDeviceStatusUpdateStatusAvailable:
		*s = DevicesDeviceStatusUpdateStatusAvailable
		return nil
	case DevicesDeviceStatusUpdateStatusUnavailable:
		*s = DevicesDeviceStatusUpdateStatusUnavailable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/devices.UpdateDeviceRequest
type DevicesUpdateDeviceRequest struct {
	NQubits OptNilInt `json:"n_qubits"`
}

// GetNQubits returns the value of NQubits.
func (s *DevicesUpdateDeviceRequest) GetNQubits() OptNilInt {
	return s.NQubits
}

// SetNQubits sets the value of NQubits.
func (s *DevicesUpdateDeviceRequest) SetNQubits(val OptNilInt) {
	s.NQubits = val
}

// Ref: #/components/schemas/devices.UpdateDeviceResponse
type DevicesUpdateDeviceResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *DevicesUpdateDeviceResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *DevicesUpdateDeviceResponse) SetMessage(val string) {
	s.Message = val
}

func (*DevicesUpdateDeviceResponse) patchDeviceRes() {}

// Ref: #/components/schemas/error.BadRequest
type ErrorBadRequest struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorBadRequest) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorBadRequest) SetMessage(val string) {
	s.Message = val
}

func (*ErrorBadRequest) getJobRes()                  {}
func (*ErrorBadRequest) getJobsRes()                 {}
func (*ErrorBadRequest) getSsesrcRes()               {}
func (*ErrorBadRequest) patchDeviceInfoRes()         {}
func (*ErrorBadRequest) patchDeviceRes()             {}
func (*ErrorBadRequest) patchDeviceStatusRes()       {}
func (*ErrorBadRequest) patchJobInfoRes()            {}
func (*ErrorBadRequest) patchSselogRes()             {}
func (*ErrorBadRequest) updateJobTranspilerInfoRes() {}

// Ref: #/components/schemas/error.ConflictError
type ErrorConflictError struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorConflictError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ErrorConflictError) patchJobRes() {}

// Ref: #/components/schemas/error.InternalServerError
type ErrorInternalServerError struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorInternalServerError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorInternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*ErrorInternalServerError) getJobsRes()           {}
func (*ErrorInternalServerError) getSsesrcRes()         {}
func (*ErrorInternalServerError) patchDeviceInfoRes()   {}
func (*ErrorInternalServerError) patchDeviceRes()       {}
func (*ErrorInternalServerError) patchDeviceStatusRes() {}
func (*ErrorInternalServerError) patchSselogRes()       {}

// Ref: #/components/schemas/error.NotFoundError
type ErrorNotFoundError struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorNotFoundError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorNotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*ErrorNotFoundError) getJobRes()                  {}
func (*ErrorNotFoundError) getSsesrcRes()               {}
func (*ErrorNotFoundError) patchDeviceInfoRes()         {}
func (*ErrorNotFoundError) patchDeviceRes()             {}
func (*ErrorNotFoundError) patchDeviceStatusRes()       {}
func (*ErrorNotFoundError) patchJobInfoRes()            {}
func (*ErrorNotFoundError) patchJobRes()                {}
func (*ErrorNotFoundError) updateJobTranspilerInfoRes() {}

type GetJobsOKApplicationJSON []JobsJobDef

func (*GetJobsOKApplicationJSON) getJobsRes() {}

type GetSsesrcOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetSsesrcOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetSsesrcOK) getSsesrcRes() {}

// *(Only for estimation jobs)* The estimated expectation value and the standard deviation
// of the operators specified in `job_info.operator` field which is intended to be provided for
// estimation jobs.
// Ref: #/components/schemas/jobs.EstimationResult
type JobsEstimationResult struct {
	// The estimated expection value.
	ExpValue float64 `json:"exp_value"`
	// The standard deviation value.
	Stds float64 `json:"stds"`
}

// GetExpValue returns the value of ExpValue.
func (s *JobsEstimationResult) GetExpValue() float64 {
	return s.ExpValue
}

// GetStds returns the value of Stds.
func (s *JobsEstimationResult) GetStds() float64 {
	return s.Stds
}

// SetExpValue sets the value of ExpValue.
func (s *JobsEstimationResult) SetExpValue(val float64) {
	s.ExpValue = val
}

// SetStds sets the value of Stds.
func (s *JobsEstimationResult) SetStds(val float64) {
	s.Stds = val
}

// Ref: #/components/schemas/jobs.JobDef
type JobsJobDef struct {
	JobID          JobsJobId                      `json:"job_id"`
	Name           OptNilString                   `json:"name"`
	Description    OptString                      `json:"description"`
	DeviceID       string                         `json:"device_id"`
	Shots          int                            `json:"shots"`
	JobType        JobsJobType                    `json:"job_type"`
	JobInfo        JobsJobInfo                    `json:"job_info"`
	TranspilerInfo OptNilJobsJobDefTranspilerInfo `json:"transpiler_info"`
	SimulatorInfo  OptNilJobsJobDefSimulatorInfo  `json:"simulator_info"`
	MitigationInfo OptNilJobsJobDefMitigationInfo `json:"mitigation_info"`
	Status         JobsJobStatus                  `json:"status"`
	ExecutionTime  OptNilFloat64                  `json:"execution_time"`
	SubmittedAt    OptNilDateTime                 `json:"submitted_at"`
	ReadyAt        OptNilDateTime                 `json:"ready_at"`
	RunningAt      OptNilDateTime                 `json:"running_at"`
	EndedAt        OptNilDateTime                 `json:"ended_at"`
}

// GetJobID returns the value of JobID.
func (s *JobsJobDef) GetJobID() JobsJobId {
	return s.JobID
}

// GetName returns the value of Name.
func (s *JobsJobDef) GetName() OptNilString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *JobsJobDef) GetDescription() OptString {
	return s.Description
}

// GetDeviceID returns the value of DeviceID.
func (s *JobsJobDef) GetDeviceID() string {
	return s.DeviceID
}

// GetShots returns the value of Shots.
func (s *JobsJobDef) GetShots() int {
	return s.Shots
}

// GetJobType returns the value of JobType.
func (s *JobsJobDef) GetJobType() JobsJobType {
	return s.JobType
}

// GetJobInfo returns the value of JobInfo.
func (s *JobsJobDef) GetJobInfo() JobsJobInfo {
	return s.JobInfo
}

// GetTranspilerInfo returns the value of TranspilerInfo.
func (s *JobsJobDef) GetTranspilerInfo() OptNilJobsJobDefTranspilerInfo {
	return s.TranspilerInfo
}

// GetSimulatorInfo returns the value of SimulatorInfo.
func (s *JobsJobDef) GetSimulatorInfo() OptNilJobsJobDefSimulatorInfo {
	return s.SimulatorInfo
}

// GetMitigationInfo returns the value of MitigationInfo.
func (s *JobsJobDef) GetMitigationInfo() OptNilJobsJobDefMitigationInfo {
	return s.MitigationInfo
}

// GetStatus returns the value of Status.
func (s *JobsJobDef) GetStatus() JobsJobStatus {
	return s.Status
}

// GetExecutionTime returns the value of ExecutionTime.
func (s *JobsJobDef) GetExecutionTime() OptNilFloat64 {
	return s.ExecutionTime
}

// GetSubmittedAt returns the value of SubmittedAt.
func (s *JobsJobDef) GetSubmittedAt() OptNilDateTime {
	return s.SubmittedAt
}

// GetReadyAt returns the value of ReadyAt.
func (s *JobsJobDef) GetReadyAt() OptNilDateTime {
	return s.ReadyAt
}

// GetRunningAt returns the value of RunningAt.
func (s *JobsJobDef) GetRunningAt() OptNilDateTime {
	return s.RunningAt
}

// GetEndedAt returns the value of EndedAt.
func (s *JobsJobDef) GetEndedAt() OptNilDateTime {
	return s.EndedAt
}

// SetJobID sets the value of JobID.
func (s *JobsJobDef) SetJobID(val JobsJobId) {
	s.JobID = val
}

// SetName sets the value of Name.
func (s *JobsJobDef) SetName(val OptNilString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *JobsJobDef) SetDescription(val OptString) {
	s.Description = val
}

// SetDeviceID sets the value of DeviceID.
func (s *JobsJobDef) SetDeviceID(val string) {
	s.DeviceID = val
}

// SetShots sets the value of Shots.
func (s *JobsJobDef) SetShots(val int) {
	s.Shots = val
}

// SetJobType sets the value of JobType.
func (s *JobsJobDef) SetJobType(val JobsJobType) {
	s.JobType = val
}

// SetJobInfo sets the value of JobInfo.
func (s *JobsJobDef) SetJobInfo(val JobsJobInfo) {
	s.JobInfo = val
}

// SetTranspilerInfo sets the value of TranspilerInfo.
func (s *JobsJobDef) SetTranspilerInfo(val OptNilJobsJobDefTranspilerInfo) {
	s.TranspilerInfo = val
}

// SetSimulatorInfo sets the value of SimulatorInfo.
func (s *JobsJobDef) SetSimulatorInfo(val OptNilJobsJobDefSimulatorInfo) {
	s.SimulatorInfo = val
}

// SetMitigationInfo sets the value of MitigationInfo.
func (s *JobsJobDef) SetMitigationInfo(val OptNilJobsJobDefMitigationInfo) {
	s.MitigationInfo = val
}

// SetStatus sets the value of Status.
func (s *JobsJobDef) SetStatus(val JobsJobStatus) {
	s.Status = val
}

// SetExecutionTime sets the value of ExecutionTime.
func (s *JobsJobDef) SetExecutionTime(val OptNilFloat64) {
	s.ExecutionTime = val
}

// SetSubmittedAt sets the value of SubmittedAt.
func (s *JobsJobDef) SetSubmittedAt(val OptNilDateTime) {
	s.SubmittedAt = val
}

// SetReadyAt sets the value of ReadyAt.
func (s *JobsJobDef) SetReadyAt(val OptNilDateTime) {
	s.ReadyAt = val
}

// SetRunningAt sets the value of RunningAt.
func (s *JobsJobDef) SetRunningAt(val OptNilDateTime) {
	s.RunningAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *JobsJobDef) SetEndedAt(val OptNilDateTime) {
	s.EndedAt = val
}

func (*JobsJobDef) getJobRes() {}

type JobsJobDefMitigationInfo map[string]jx.Raw

func (s *JobsJobDefMitigationInfo) init() JobsJobDefMitigationInfo {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type JobsJobDefSimulatorInfo map[string]jx.Raw

func (s *JobsJobDefSimulatorInfo) init() JobsJobDefSimulatorInfo {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type JobsJobDefTranspilerInfo map[string]jx.Raw

func (s *JobsJobDefTranspilerInfo) init() JobsJobDefTranspilerInfo {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type JobsJobId string

// Ref: #/components/schemas/jobs.JobInfo
type JobsJobInfo struct {
	// A list of OPENQASM3 program. For non-multiprogramming jobs, this field is assumed to contain
	// exactly one program. Otherwise, those programs are combined according to the multiprogramming
	// machinery.
	Program []string `json:"program"`
	// For multiprogramming jobs, this field contains the combined circuit.
	CombinedProgram OptNilString `json:"combined_program"`
	// *(Only for estimation jobs)* The operator (or observable) for which the expectation
	// value is to be estimated.
	Operator        OptNilJobsOperatorItemArray `json:"operator"`
	Result          OptNilJobsJobResult         `json:"result"`
	TranspileResult OptNilJobsTranspileResult   `json:"transpile_result"`
	// Describing the reason why there is no result.
	Message OptNilString `json:"message"`
}

// GetProgram returns the value of Program.
func (s *JobsJobInfo) GetProgram() []string {
	return s.Program
}

// GetCombinedProgram returns the value of CombinedProgram.
func (s *JobsJobInfo) GetCombinedProgram() OptNilString {
	return s.CombinedProgram
}

// GetOperator returns the value of Operator.
func (s *JobsJobInfo) GetOperator() OptNilJobsOperatorItemArray {
	return s.Operator
}

// GetResult returns the value of Result.
func (s *JobsJobInfo) GetResult() OptNilJobsJobResult {
	return s.Result
}

// GetTranspileResult returns the value of TranspileResult.
func (s *JobsJobInfo) GetTranspileResult() OptNilJobsTranspileResult {
	return s.TranspileResult
}

// GetMessage returns the value of Message.
func (s *JobsJobInfo) GetMessage() OptNilString {
	return s.Message
}

// SetProgram sets the value of Program.
func (s *JobsJobInfo) SetProgram(val []string) {
	s.Program = val
}

// SetCombinedProgram sets the value of CombinedProgram.
func (s *JobsJobInfo) SetCombinedProgram(val OptNilString) {
	s.CombinedProgram = val
}

// SetOperator sets the value of Operator.
func (s *JobsJobInfo) SetOperator(val OptNilJobsOperatorItemArray) {
	s.Operator = val
}

// SetResult sets the value of Result.
func (s *JobsJobInfo) SetResult(val OptNilJobsJobResult) {
	s.Result = val
}

// SetTranspileResult sets the value of TranspileResult.
func (s *JobsJobInfo) SetTranspileResult(val OptNilJobsTranspileResult) {
	s.TranspileResult = val
}

// SetMessage sets the value of Message.
func (s *JobsJobInfo) SetMessage(val OptNilString) {
	s.Message = val
}

// Ref: #/components/schemas/jobs.JobResult
type JobsJobResult struct {
	Sampling        OptNilJobsSamplingResult   `json:"sampling"`
	Estimation      OptNilJobsEstimationResult `json:"estimation"`
	AdditionalProps JobsJobResultAdditional
}

// GetSampling returns the value of Sampling.
func (s *JobsJobResult) GetSampling() OptNilJobsSamplingResult {
	return s.Sampling
}

// GetEstimation returns the value of Estimation.
func (s *JobsJobResult) GetEstimation() OptNilJobsEstimationResult {
	return s.Estimation
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *JobsJobResult) GetAdditionalProps() JobsJobResultAdditional {
	return s.AdditionalProps
}

// SetSampling sets the value of Sampling.
func (s *JobsJobResult) SetSampling(val OptNilJobsSamplingResult) {
	s.Sampling = val
}

// SetEstimation sets the value of Estimation.
func (s *JobsJobResult) SetEstimation(val OptNilJobsEstimationResult) {
	s.Estimation = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *JobsJobResult) SetAdditionalProps(val JobsJobResultAdditional) {
	s.AdditionalProps = val
}

type JobsJobResultAdditional map[string]jx.Raw

func (s *JobsJobResultAdditional) init() JobsJobResultAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/jobs.JobStatus
type JobsJobStatus string

const (
	JobsJobStatusSubmitted JobsJobStatus = "submitted"
	JobsJobStatusReady     JobsJobStatus = "ready"
	JobsJobStatusRunning   JobsJobStatus = "running"
	JobsJobStatusSucceeded JobsJobStatus = "succeeded"
	JobsJobStatusFailed    JobsJobStatus = "failed"
	JobsJobStatusCancelled JobsJobStatus = "cancelled"
)

// AllValues returns all JobsJobStatus values.
func (JobsJobStatus) AllValues() []JobsJobStatus {
	return []JobsJobStatus{
		JobsJobStatusSubmitted,
		JobsJobStatusReady,
		JobsJobStatusRunning,
		JobsJobStatusSucceeded,
		JobsJobStatusFailed,
		JobsJobStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JobsJobStatus) MarshalText() ([]byte, error) {
	switch s {
	case JobsJobStatusSubmitted:
		return []byte(s), nil
	case JobsJobStatusReady:
		return []byte(s), nil
	case JobsJobStatusRunning:
		return []byte(s), nil
	case JobsJobStatusSucceeded:
		return []byte(s), nil
	case JobsJobStatusFailed:
		return []byte(s), nil
	case JobsJobStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobsJobStatus) UnmarshalText(data []byte) error {
	switch JobsJobStatus(data) {
	case JobsJobStatusSubmitted:
		*s = JobsJobStatusSubmitted
		return nil
	case JobsJobStatusReady:
		*s = JobsJobStatusReady
		return nil
	case JobsJobStatusRunning:
		*s = JobsJobStatusRunning
		return nil
	case JobsJobStatusSucceeded:
		*s = JobsJobStatusSucceeded
		return nil
	case JobsJobStatusFailed:
		*s = JobsJobStatusFailed
		return nil
	case JobsJobStatusCancelled:
		*s = JobsJobStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/jobs.JobStatusUpdate
type JobsJobStatusUpdate struct {
	Status JobsJobStatusUpdateStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *JobsJobStatusUpdate) GetStatus() JobsJobStatusUpdateStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *JobsJobStatusUpdate) SetStatus(val JobsJobStatusUpdateStatus) {
	s.Status = val
}

// Ref: #/components/schemas/jobs.JobStatusUpdateResponse
type JobsJobStatusUpdateResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *JobsJobStatusUpdateResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *JobsJobStatusUpdateResponse) SetMessage(val string) {
	s.Message = val
}

func (*JobsJobStatusUpdateResponse) patchJobRes() {}

type JobsJobStatusUpdateStatus string

const (
	JobsJobStatusUpdateStatusRunning JobsJobStatusUpdateStatus = "running"
)

// AllValues returns all JobsJobStatusUpdateStatus values.
func (JobsJobStatusUpdateStatus) AllValues() []JobsJobStatusUpdateStatus {
	return []JobsJobStatusUpdateStatus{
		JobsJobStatusUpdateStatusRunning,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JobsJobStatusUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case JobsJobStatusUpdateStatusRunning:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobsJobStatusUpdateStatus) UnmarshalText(data []byte) error {
	switch JobsJobStatusUpdateStatus(data) {
	case JobsJobStatusUpdateStatusRunning:
		*s = JobsJobStatusUpdateStatusRunning
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/jobs.JobType
type JobsJobType string

const (
	JobsJobTypeSampling    JobsJobType = "sampling"
	JobsJobTypeEstimation  JobsJobType = "estimation"
	JobsJobTypeMultiManual JobsJobType = "multi_manual"
	JobsJobTypeSse         JobsJobType = "sse"
)

// AllValues returns all JobsJobType values.
func (JobsJobType) AllValues() []JobsJobType {
	return []JobsJobType{
		JobsJobTypeSampling,
		JobsJobTypeEstimation,
		JobsJobTypeMultiManual,
		JobsJobTypeSse,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JobsJobType) MarshalText() ([]byte, error) {
	switch s {
	case JobsJobTypeSampling:
		return []byte(s), nil
	case JobsJobTypeEstimation:
		return []byte(s), nil
	case JobsJobTypeMultiManual:
		return []byte(s), nil
	case JobsJobTypeSse:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobsJobType) UnmarshalText(data []byte) error {
	switch JobsJobType(data) {
	case JobsJobTypeSampling:
		*s = JobsJobTypeSampling
		return nil
	case JobsJobTypeEstimation:
		*s = JobsJobTypeEstimation
		return nil
	case JobsJobTypeMultiManual:
		*s = JobsJobTypeMultiManual
		return nil
	case JobsJobTypeSse:
		*s = JobsJobTypeSse
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/jobs.OperatorItem
type JobsOperatorItem struct {
	// The Pauli string.
	Pauli string `json:"pauli"`
	// Coefficient number in the Pauli string representation.
	Coeff OptFloat64 `json:"coeff"`
}

// GetPauli returns the value of Pauli.
func (s *JobsOperatorItem) GetPauli() string {
	return s.Pauli
}

// GetCoeff returns the value of Coeff.
func (s *JobsOperatorItem) GetCoeff() OptFloat64 {
	return s.Coeff
}

// SetPauli sets the value of Pauli.
func (s *JobsOperatorItem) SetPauli(val string) {
	s.Pauli = val
}

// SetCoeff sets the value of Coeff.
func (s *JobsOperatorItem) SetCoeff(val OptFloat64) {
	s.Coeff = val
}

// *(Only for sampling jobs)* JSON string representing the sampling result.
// Ref: #/components/schemas/jobs.SamplingResult
type JobsSamplingResult struct {
	Counts        JobsSamplingResultCounts              `json:"counts"`
	DividedCounts OptNilJobsSamplingResultDividedCounts `json:"divided_counts"`
}

// GetCounts returns the value of Counts.
func (s *JobsSamplingResult) GetCounts() JobsSamplingResultCounts {
	return s.Counts
}

// GetDividedCounts returns the value of DividedCounts.
func (s *JobsSamplingResult) GetDividedCounts() OptNilJobsSamplingResultDividedCounts {
	return s.DividedCounts
}

// SetCounts sets the value of Counts.
func (s *JobsSamplingResult) SetCounts(val JobsSamplingResultCounts) {
	s.Counts = val
}

// SetDividedCounts sets the value of DividedCounts.
func (s *JobsSamplingResult) SetDividedCounts(val OptNilJobsSamplingResultDividedCounts) {
	s.DividedCounts = val
}

type JobsSamplingResultCounts map[string]jx.Raw

func (s *JobsSamplingResultCounts) init() JobsSamplingResultCounts {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type JobsSamplingResultDividedCounts map[string]jx.Raw

func (s *JobsSamplingResultDividedCounts) init() JobsSamplingResultDividedCounts {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/jobs.TranspileResult
type JobsTranspileResult struct {
	TranspiledProgram      NilString                                    `json:"transpiled_program"`
	Stats                  NilJobsTranspileResultStats                  `json:"stats"`
	VirtualPhysicalMapping NilJobsTranspileResultVirtualPhysicalMapping `json:"virtual_physical_mapping"`
}

// GetTranspiledProgram returns the value of TranspiledProgram.
func (s *JobsTranspileResult) GetTranspiledProgram() NilString {
	return s.TranspiledProgram
}

// GetStats returns the value of Stats.
func (s *JobsTranspileResult) GetStats() NilJobsTranspileResultStats {
	return s.Stats
}

// GetVirtualPhysicalMapping returns the value of VirtualPhysicalMapping.
func (s *JobsTranspileResult) GetVirtualPhysicalMapping() NilJobsTranspileResultVirtualPhysicalMapping {
	return s.VirtualPhysicalMapping
}

// SetTranspiledProgram sets the value of TranspiledProgram.
func (s *JobsTranspileResult) SetTranspiledProgram(val NilString) {
	s.TranspiledProgram = val
}

// SetStats sets the value of Stats.
func (s *JobsTranspileResult) SetStats(val NilJobsTranspileResultStats) {
	s.Stats = val
}

// SetVirtualPhysicalMapping sets the value of VirtualPhysicalMapping.
func (s *JobsTranspileResult) SetVirtualPhysicalMapping(val NilJobsTranspileResultVirtualPhysicalMapping) {
	s.VirtualPhysicalMapping = val
}

type JobsTranspileResultStats map[string]jx.Raw

func (s *JobsTranspileResultStats) init() JobsTranspileResultStats {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type JobsTranspileResultVirtualPhysicalMapping map[string]jx.Raw

func (s *JobsTranspileResultVirtualPhysicalMapping) init() JobsTranspileResultVirtualPhysicalMapping {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/jobs.UpdateJobInfo
type JobsUpdateJobInfo struct {
	CombinedProgram OptNilString              `json:"combined_program"`
	TranspileResult OptNilJobsTranspileResult `json:"transpile_result"`
	Result          OptNilJobsJobResult       `json:"result"`
	Message         OptNilString              `json:"message"`
}

// GetCombinedProgram returns the value of CombinedProgram.
func (s *JobsUpdateJobInfo) GetCombinedProgram() OptNilString {
	return s.CombinedProgram
}

// GetTranspileResult returns the value of TranspileResult.
func (s *JobsUpdateJobInfo) GetTranspileResult() OptNilJobsTranspileResult {
	return s.TranspileResult
}

// GetResult returns the value of Result.
func (s *JobsUpdateJobInfo) GetResult() OptNilJobsJobResult {
	return s.Result
}

// GetMessage returns the value of Message.
func (s *JobsUpdateJobInfo) GetMessage() OptNilString {
	return s.Message
}

// SetCombinedProgram sets the value of CombinedProgram.
func (s *JobsUpdateJobInfo) SetCombinedProgram(val OptNilString) {
	s.CombinedProgram = val
}

// SetTranspileResult sets the value of TranspileResult.
func (s *JobsUpdateJobInfo) SetTranspileResult(val OptNilJobsTranspileResult) {
	s.TranspileResult = val
}

// SetResult sets the value of Result.
func (s *JobsUpdateJobInfo) SetResult(val OptNilJobsJobResult) {
	s.Result = val
}

// SetMessage sets the value of Message.
func (s *JobsUpdateJobInfo) SetMessage(val OptNilString) {
	s.Message = val
}

// Ref: #/components/schemas/jobs.UpdateJobInfoRequest
type JobsUpdateJobInfoRequest struct {
	// Overwrite the job status. If this field is not specified, the status will be updated automatically.
	OverwriteStatus OptJobsJobStatus `json:"overwrite_status"`
	// Execution time for quantum computation. Specify the time in seconds, including up to milliseconds.
	ExecutionTime OptNilFloat64        `json:"execution_time"`
	JobInfo       OptJobsUpdateJobInfo `json:"job_info"`
}

// GetOverwriteStatus returns the value of OverwriteStatus.
func (s *JobsUpdateJobInfoRequest) GetOverwriteStatus() OptJobsJobStatus {
	return s.OverwriteStatus
}

// GetExecutionTime returns the value of ExecutionTime.
func (s *JobsUpdateJobInfoRequest) GetExecutionTime() OptNilFloat64 {
	return s.ExecutionTime
}

// GetJobInfo returns the value of JobInfo.
func (s *JobsUpdateJobInfoRequest) GetJobInfo() OptJobsUpdateJobInfo {
	return s.JobInfo
}

// SetOverwriteStatus sets the value of OverwriteStatus.
func (s *JobsUpdateJobInfoRequest) SetOverwriteStatus(val OptJobsJobStatus) {
	s.OverwriteStatus = val
}

// SetExecutionTime sets the value of ExecutionTime.
func (s *JobsUpdateJobInfoRequest) SetExecutionTime(val OptNilFloat64) {
	s.ExecutionTime = val
}

// SetJobInfo sets the value of JobInfo.
func (s *JobsUpdateJobInfoRequest) SetJobInfo(val OptJobsUpdateJobInfo) {
	s.JobInfo = val
}

// Ref: #/components/schemas/jobs.UpdateJobInfoResponse
type JobsUpdateJobInfoResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *JobsUpdateJobInfoResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *JobsUpdateJobInfoResponse) SetMessage(val string) {
	s.Message = val
}

func (*JobsUpdateJobInfoResponse) patchJobInfoRes() {}

// Ref: #/components/schemas/jobs.UpdateJobTranspilerInfoRequest
type JobsUpdateJobTranspilerInfoRequest map[string]jx.Raw

func (s *JobsUpdateJobTranspilerInfoRequest) init() JobsUpdateJobTranspilerInfoRequest {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/jobs.UpdateJobTranspilerInfoResponse
type JobsUpdateJobTranspilerInfoResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *JobsUpdateJobTranspilerInfoResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *JobsUpdateJobTranspilerInfoResponse) SetMessage(val string) {
	s.Message = val
}

func (*JobsUpdateJobTranspilerInfoResponse) updateJobTranspilerInfoRes() {}

// Ref: #/components/schemas/jobs.UploadSselogRequest
type JobsUploadSselogRequestMultipart struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *JobsUploadSselogRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *JobsUploadSselogRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/jobs.UploadSselogResponse
type JobsUploadSselogResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *JobsUploadSselogResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *JobsUploadSselogResponse) SetMessage(val string) {
	s.Message = val
}

func (*JobsUploadSselogResponse) patchSselogRes() {}

// NewNilJobsTranspileResultStats returns new NilJobsTranspileResultStats with value set to v.
func NewNilJobsTranspileResultStats(v JobsTranspileResultStats) NilJobsTranspileResultStats {
	return NilJobsTranspileResultStats{
		Value: v,
	}
}

// NilJobsTranspileResultStats is nullable JobsTranspileResultStats.
type NilJobsTranspileResultStats struct {
	Value JobsTranspileResultStats
	Null  bool
}

// SetTo sets value to v.
func (o *NilJobsTranspileResultStats) SetTo(v JobsTranspileResultStats) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilJobsTranspileResultStats) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilJobsTranspileResultStats) SetToNull() {
	o.Null = true
	var v JobsTranspileResultStats
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilJobsTranspileResultStats) Get() (v JobsTranspileResultStats, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilJobsTranspileResultStats) Or(d JobsTranspileResultStats) JobsTranspileResultStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilJobsTranspileResultVirtualPhysicalMapping returns new NilJobsTranspileResultVirtualPhysicalMapping with value set to v.
func NewNilJobsTranspileResultVirtualPhysicalMapping(v JobsTranspileResultVirtualPhysicalMapping) NilJobsTranspileResultVirtualPhysicalMapping {
	return NilJobsTranspileResultVirtualPhysicalMapping{
		Value: v,
	}
}

// NilJobsTranspileResultVirtualPhysicalMapping is nullable JobsTranspileResultVirtualPhysicalMapping.
type NilJobsTranspileResultVirtualPhysicalMapping struct {
	Value JobsTranspileResultVirtualPhysicalMapping
	Null  bool
}

// SetTo sets value to v.
func (o *NilJobsTranspileResultVirtualPhysicalMapping) SetTo(v JobsTranspileResultVirtualPhysicalMapping) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilJobsTranspileResultVirtualPhysicalMapping) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilJobsTranspileResultVirtualPhysicalMapping) SetToNull() {
	o.Null = true
	var v JobsTranspileResultVirtualPhysicalMapping
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilJobsTranspileResultVirtualPhysicalMapping) Get() (v JobsTranspileResultVirtualPhysicalMapping, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilJobsTranspileResultVirtualPhysicalMapping) Or(d JobsTranspileResultVirtualPhysicalMapping) JobsTranspileResultVirtualPhysicalMapping {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDevicesDeviceInfoUpdate returns new OptDevicesDeviceInfoUpdate with value set to v.
func NewOptDevicesDeviceInfoUpdate(v DevicesDeviceInfoUpdate) OptDevicesDeviceInfoUpdate {
	return OptDevicesDeviceInfoUpdate{
		Value: v,
		Set:   true,
	}
}

// OptDevicesDeviceInfoUpdate is optional DevicesDeviceInfoUpdate.
type OptDevicesDeviceInfoUpdate struct {
	Value DevicesDeviceInfoUpdate
	Set   bool
}

// IsSet returns true if OptDevicesDeviceInfoUpdate was set.
func (o OptDevicesDeviceInfoUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDevicesDeviceInfoUpdate) Reset() {
	var v DevicesDeviceInfoUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDevicesDeviceInfoUpdate) SetTo(v DevicesDeviceInfoUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDevicesDeviceInfoUpdate) Get() (v DevicesDeviceInfoUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDevicesDeviceInfoUpdate) Or(d DevicesDeviceInfoUpdate) DevicesDeviceInfoUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDevicesDeviceStatusUpdate returns new OptDevicesDeviceStatusUpdate with value set to v.
func NewOptDevicesDeviceStatusUpdate(v DevicesDeviceStatusUpdate) OptDevicesDeviceStatusUpdate {
	return OptDevicesDeviceStatusUpdate{
		Value: v,
		Set:   true,
	}
}

// OptDevicesDeviceStatusUpdate is optional DevicesDeviceStatusUpdate.
type OptDevicesDeviceStatusUpdate struct {
	Value DevicesDeviceStatusUpdate
	Set   bool
}

// IsSet returns true if OptDevicesDeviceStatusUpdate was set.
func (o OptDevicesDeviceStatusUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDevicesDeviceStatusUpdate) Reset() {
	var v DevicesDeviceStatusUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDevicesDeviceStatusUpdate) SetTo(v DevicesDeviceStatusUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDevicesDeviceStatusUpdate) Get() (v DevicesDeviceStatusUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDevicesDeviceStatusUpdate) Or(d DevicesDeviceStatusUpdate) DevicesDeviceStatusUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDevicesUpdateDeviceRequest returns new OptDevicesUpdateDeviceRequest with value set to v.
func NewOptDevicesUpdateDeviceRequest(v DevicesUpdateDeviceRequest) OptDevicesUpdateDeviceRequest {
	return OptDevicesUpdateDeviceRequest{
		Value: v,
		Set:   true,
	}
}

// OptDevicesUpdateDeviceRequest is optional DevicesUpdateDeviceRequest.
type OptDevicesUpdateDeviceRequest struct {
	Value DevicesUpdateDeviceRequest
	Set   bool
}

// IsSet returns true if OptDevicesUpdateDeviceRequest was set.
func (o OptDevicesUpdateDeviceRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDevicesUpdateDeviceRequest) Reset() {
	var v DevicesUpdateDeviceRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDevicesUpdateDeviceRequest) SetTo(v DevicesUpdateDeviceRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDevicesUpdateDeviceRequest) Get() (v DevicesUpdateDeviceRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDevicesUpdateDeviceRequest) Or(d DevicesUpdateDeviceRequest) DevicesUpdateDeviceRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobsJobStatus returns new OptJobsJobStatus with value set to v.
func NewOptJobsJobStatus(v JobsJobStatus) OptJobsJobStatus {
	return OptJobsJobStatus{
		Value: v,
		Set:   true,
	}
}

// OptJobsJobStatus is optional JobsJobStatus.
type OptJobsJobStatus struct {
	Value JobsJobStatus
	Set   bool
}

// IsSet returns true if OptJobsJobStatus was set.
func (o OptJobsJobStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobsJobStatus) Reset() {
	var v JobsJobStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobsJobStatus) SetTo(v JobsJobStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobsJobStatus) Get() (v JobsJobStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobsJobStatus) Or(d JobsJobStatus) JobsJobStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobsJobStatusUpdate returns new OptJobsJobStatusUpdate with value set to v.
func NewOptJobsJobStatusUpdate(v JobsJobStatusUpdate) OptJobsJobStatusUpdate {
	return OptJobsJobStatusUpdate{
		Value: v,
		Set:   true,
	}
}

// OptJobsJobStatusUpdate is optional JobsJobStatusUpdate.
type OptJobsJobStatusUpdate struct {
	Value JobsJobStatusUpdate
	Set   bool
}

// IsSet returns true if OptJobsJobStatusUpdate was set.
func (o OptJobsJobStatusUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobsJobStatusUpdate) Reset() {
	var v JobsJobStatusUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobsJobStatusUpdate) SetTo(v JobsJobStatusUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobsJobStatusUpdate) Get() (v JobsJobStatusUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobsJobStatusUpdate) Or(d JobsJobStatusUpdate) JobsJobStatusUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobsUpdateJobInfo returns new OptJobsUpdateJobInfo with value set to v.
func NewOptJobsUpdateJobInfo(v JobsUpdateJobInfo) OptJobsUpdateJobInfo {
	return OptJobsUpdateJobInfo{
		Value: v,
		Set:   true,
	}
}

// OptJobsUpdateJobInfo is optional JobsUpdateJobInfo.
type OptJobsUpdateJobInfo struct {
	Value JobsUpdateJobInfo
	Set   bool
}

// IsSet returns true if OptJobsUpdateJobInfo was set.
func (o OptJobsUpdateJobInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobsUpdateJobInfo) Reset() {
	var v JobsUpdateJobInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobsUpdateJobInfo) SetTo(v JobsUpdateJobInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobsUpdateJobInfo) Get() (v JobsUpdateJobInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobsUpdateJobInfo) Or(d JobsUpdateJobInfo) JobsUpdateJobInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobsUpdateJobInfoRequest returns new OptJobsUpdateJobInfoRequest with value set to v.
func NewOptJobsUpdateJobInfoRequest(v JobsUpdateJobInfoRequest) OptJobsUpdateJobInfoRequest {
	return OptJobsUpdateJobInfoRequest{
		Value: v,
		Set:   true,
	}
}

// OptJobsUpdateJobInfoRequest is optional JobsUpdateJobInfoRequest.
type OptJobsUpdateJobInfoRequest struct {
	Value JobsUpdateJobInfoRequest
	Set   bool
}

// IsSet returns true if OptJobsUpdateJobInfoRequest was set.
func (o OptJobsUpdateJobInfoRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobsUpdateJobInfoRequest) Reset() {
	var v JobsUpdateJobInfoRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobsUpdateJobInfoRequest) SetTo(v JobsUpdateJobInfoRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobsUpdateJobInfoRequest) Get() (v JobsUpdateJobInfoRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobsUpdateJobInfoRequest) Or(d JobsUpdateJobInfoRequest) JobsUpdateJobInfoRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobsUpdateJobTranspilerInfoRequest returns new OptJobsUpdateJobTranspilerInfoRequest with value set to v.
func NewOptJobsUpdateJobTranspilerInfoRequest(v JobsUpdateJobTranspilerInfoRequest) OptJobsUpdateJobTranspilerInfoRequest {
	return OptJobsUpdateJobTranspilerInfoRequest{
		Value: v,
		Set:   true,
	}
}

// OptJobsUpdateJobTranspilerInfoRequest is optional JobsUpdateJobTranspilerInfoRequest.
type OptJobsUpdateJobTranspilerInfoRequest struct {
	Value JobsUpdateJobTranspilerInfoRequest
	Set   bool
}

// IsSet returns true if OptJobsUpdateJobTranspilerInfoRequest was set.
func (o OptJobsUpdateJobTranspilerInfoRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobsUpdateJobTranspilerInfoRequest) Reset() {
	var v JobsUpdateJobTranspilerInfoRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobsUpdateJobTranspilerInfoRequest) SetTo(v JobsUpdateJobTranspilerInfoRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobsUpdateJobTranspilerInfoRequest) Get() (v JobsUpdateJobTranspilerInfoRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobsUpdateJobTranspilerInfoRequest) Or(d JobsUpdateJobTranspilerInfoRequest) JobsUpdateJobTranspilerInfoRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobsUploadSselogRequestMultipart returns new OptJobsUploadSselogRequestMultipart with value set to v.
func NewOptJobsUploadSselogRequestMultipart(v JobsUploadSselogRequestMultipart) OptJobsUploadSselogRequestMultipart {
	return OptJobsUploadSselogRequestMultipart{
		Value: v,
		Set:   true,
	}
}

// OptJobsUploadSselogRequestMultipart is optional JobsUploadSselogRequestMultipart.
type OptJobsUploadSselogRequestMultipart struct {
	Value JobsUploadSselogRequestMultipart
	Set   bool
}

// IsSet returns true if OptJobsUploadSselogRequestMultipart was set.
func (o OptJobsUploadSselogRequestMultipart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobsUploadSselogRequestMultipart) Reset() {
	var v JobsUploadSselogRequestMultipart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobsUploadSselogRequestMultipart) SetTo(v JobsUploadSselogRequestMultipart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobsUploadSselogRequestMultipart) Get() (v JobsUploadSselogRequestMultipart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobsUploadSselogRequestMultipart) Or(d JobsUploadSselogRequestMultipart) JobsUploadSselogRequestMultipart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat64 returns new OptNilFloat64 with value set to v.
func NewOptNilFloat64(v float64) OptNilFloat64 {
	return OptNilFloat64{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat64 is optional nullable float64.
type OptNilFloat64 struct {
	Value float64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat64 was set.
func (o OptNilFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat64) SetTo(v float64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFloat64) SetToNull() {
	o.Set = true
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsEstimationResult returns new OptNilJobsEstimationResult with value set to v.
func NewOptNilJobsEstimationResult(v JobsEstimationResult) OptNilJobsEstimationResult {
	return OptNilJobsEstimationResult{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsEstimationResult is optional nullable JobsEstimationResult.
type OptNilJobsEstimationResult struct {
	Value JobsEstimationResult
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsEstimationResult was set.
func (o OptNilJobsEstimationResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsEstimationResult) Reset() {
	var v JobsEstimationResult
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsEstimationResult) SetTo(v JobsEstimationResult) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsEstimationResult) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsEstimationResult) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsEstimationResult
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsEstimationResult) Get() (v JobsEstimationResult, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsEstimationResult) Or(d JobsEstimationResult) JobsEstimationResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsJobDefMitigationInfo returns new OptNilJobsJobDefMitigationInfo with value set to v.
func NewOptNilJobsJobDefMitigationInfo(v JobsJobDefMitigationInfo) OptNilJobsJobDefMitigationInfo {
	return OptNilJobsJobDefMitigationInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsJobDefMitigationInfo is optional nullable JobsJobDefMitigationInfo.
type OptNilJobsJobDefMitigationInfo struct {
	Value JobsJobDefMitigationInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsJobDefMitigationInfo was set.
func (o OptNilJobsJobDefMitigationInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsJobDefMitigationInfo) Reset() {
	var v JobsJobDefMitigationInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsJobDefMitigationInfo) SetTo(v JobsJobDefMitigationInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsJobDefMitigationInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsJobDefMitigationInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsJobDefMitigationInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsJobDefMitigationInfo) Get() (v JobsJobDefMitigationInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsJobDefMitigationInfo) Or(d JobsJobDefMitigationInfo) JobsJobDefMitigationInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsJobDefSimulatorInfo returns new OptNilJobsJobDefSimulatorInfo with value set to v.
func NewOptNilJobsJobDefSimulatorInfo(v JobsJobDefSimulatorInfo) OptNilJobsJobDefSimulatorInfo {
	return OptNilJobsJobDefSimulatorInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsJobDefSimulatorInfo is optional nullable JobsJobDefSimulatorInfo.
type OptNilJobsJobDefSimulatorInfo struct {
	Value JobsJobDefSimulatorInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsJobDefSimulatorInfo was set.
func (o OptNilJobsJobDefSimulatorInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsJobDefSimulatorInfo) Reset() {
	var v JobsJobDefSimulatorInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsJobDefSimulatorInfo) SetTo(v JobsJobDefSimulatorInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsJobDefSimulatorInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsJobDefSimulatorInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsJobDefSimulatorInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsJobDefSimulatorInfo) Get() (v JobsJobDefSimulatorInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsJobDefSimulatorInfo) Or(d JobsJobDefSimulatorInfo) JobsJobDefSimulatorInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsJobDefTranspilerInfo returns new OptNilJobsJobDefTranspilerInfo with value set to v.
func NewOptNilJobsJobDefTranspilerInfo(v JobsJobDefTranspilerInfo) OptNilJobsJobDefTranspilerInfo {
	return OptNilJobsJobDefTranspilerInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsJobDefTranspilerInfo is optional nullable JobsJobDefTranspilerInfo.
type OptNilJobsJobDefTranspilerInfo struct {
	Value JobsJobDefTranspilerInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsJobDefTranspilerInfo was set.
func (o OptNilJobsJobDefTranspilerInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsJobDefTranspilerInfo) Reset() {
	var v JobsJobDefTranspilerInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsJobDefTranspilerInfo) SetTo(v JobsJobDefTranspilerInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsJobDefTranspilerInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsJobDefTranspilerInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsJobDefTranspilerInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsJobDefTranspilerInfo) Get() (v JobsJobDefTranspilerInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsJobDefTranspilerInfo) Or(d JobsJobDefTranspilerInfo) JobsJobDefTranspilerInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsJobResult returns new OptNilJobsJobResult with value set to v.
func NewOptNilJobsJobResult(v JobsJobResult) OptNilJobsJobResult {
	return OptNilJobsJobResult{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsJobResult is optional nullable JobsJobResult.
type OptNilJobsJobResult struct {
	Value JobsJobResult
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsJobResult was set.
func (o OptNilJobsJobResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsJobResult) Reset() {
	var v JobsJobResult
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsJobResult) SetTo(v JobsJobResult) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsJobResult) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsJobResult) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsJobResult
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsJobResult) Get() (v JobsJobResult, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsJobResult) Or(d JobsJobResult) JobsJobResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsOperatorItemArray returns new OptNilJobsOperatorItemArray with value set to v.
func NewOptNilJobsOperatorItemArray(v []JobsOperatorItem) OptNilJobsOperatorItemArray {
	return OptNilJobsOperatorItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsOperatorItemArray is optional nullable []JobsOperatorItem.
type OptNilJobsOperatorItemArray struct {
	Value []JobsOperatorItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsOperatorItemArray was set.
func (o OptNilJobsOperatorItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsOperatorItemArray) Reset() {
	var v []JobsOperatorItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsOperatorItemArray) SetTo(v []JobsOperatorItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsOperatorItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsOperatorItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []JobsOperatorItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsOperatorItemArray) Get() (v []JobsOperatorItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsOperatorItemArray) Or(d []JobsOperatorItem) []JobsOperatorItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsSamplingResult returns new OptNilJobsSamplingResult with value set to v.
func NewOptNilJobsSamplingResult(v JobsSamplingResult) OptNilJobsSamplingResult {
	return OptNilJobsSamplingResult{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsSamplingResult is optional nullable JobsSamplingResult.
type OptNilJobsSamplingResult struct {
	Value JobsSamplingResult
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsSamplingResult was set.
func (o OptNilJobsSamplingResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsSamplingResult) Reset() {
	var v JobsSamplingResult
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsSamplingResult) SetTo(v JobsSamplingResult) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsSamplingResult) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsSamplingResult) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsSamplingResult
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsSamplingResult) Get() (v JobsSamplingResult, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsSamplingResult) Or(d JobsSamplingResult) JobsSamplingResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsSamplingResultDividedCounts returns new OptNilJobsSamplingResultDividedCounts with value set to v.
func NewOptNilJobsSamplingResultDividedCounts(v JobsSamplingResultDividedCounts) OptNilJobsSamplingResultDividedCounts {
	return OptNilJobsSamplingResultDividedCounts{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsSamplingResultDividedCounts is optional nullable JobsSamplingResultDividedCounts.
type OptNilJobsSamplingResultDividedCounts struct {
	Value JobsSamplingResultDividedCounts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsSamplingResultDividedCounts was set.
func (o OptNilJobsSamplingResultDividedCounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsSamplingResultDividedCounts) Reset() {
	var v JobsSamplingResultDividedCounts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsSamplingResultDividedCounts) SetTo(v JobsSamplingResultDividedCounts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsSamplingResultDividedCounts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsSamplingResultDividedCounts) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsSamplingResultDividedCounts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsSamplingResultDividedCounts) Get() (v JobsSamplingResultDividedCounts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsSamplingResultDividedCounts) Or(d JobsSamplingResultDividedCounts) JobsSamplingResultDividedCounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilJobsTranspileResult returns new OptNilJobsTranspileResult with value set to v.
func NewOptNilJobsTranspileResult(v JobsTranspileResult) OptNilJobsTranspileResult {
	return OptNilJobsTranspileResult{
		Value: v,
		Set:   true,
	}
}

// OptNilJobsTranspileResult is optional nullable JobsTranspileResult.
type OptNilJobsTranspileResult struct {
	Value JobsTranspileResult
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilJobsTranspileResult was set.
func (o OptNilJobsTranspileResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilJobsTranspileResult) Reset() {
	var v JobsTranspileResult
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilJobsTranspileResult) SetTo(v JobsTranspileResult) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilJobsTranspileResult) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilJobsTranspileResult) SetToNull() {
	o.Set = true
	o.Null = true
	var v JobsTranspileResult
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilJobsTranspileResult) Get() (v JobsTranspileResult, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilJobsTranspileResult) Or(d JobsTranspileResult) JobsTranspileResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
