// Code generated by ogen, DO NOT EDIT.

package providerapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetJob implements get_job operation.
	//
	// Get a job by ID.
	//
	// GET /jobs/{job_id}
	GetJob(ctx context.Context, params GetJobParams) (GetJobRes, error)
	// GetJobs implements get_jobs operation.
	//
	// Search jobs for a device.
	//
	// GET /jobs
	GetJobs(ctx context.Context, params GetJobsParams) (GetJobsRes, error)
	// GetSsesrc implements get_ssesrc operation.
	//
	// Get SSE program source file of selected job.
	//
	// GET /jobs/{job_id}/ssesrc
	GetSsesrc(ctx context.Context, params GetSsesrcParams) (GetSsesrcRes, error)
	// PatchDevice implements patchDevice operation.
	//
	// Update a part of selected device's properties.
	//
	// PATCH /devices/{device_id}
	PatchDevice(ctx context.Context, req OptDevicesUpdateDeviceRequest, params PatchDeviceParams) (PatchDeviceRes, error)
	// PatchDeviceInfo implements patchDeviceInfo operation.
	//
	// Update device_info(calibration data) of selected device.
	//
	// PATCH /devices/{device_id}/device_info
	PatchDeviceInfo(ctx context.Context, req OptDevicesDeviceInfoUpdate, params PatchDeviceInfoParams) (PatchDeviceInfoRes, error)
	// PatchDeviceStatus implements patchDeviceStatus operation.
	//
	// Update status of selected device.
	//
	// PATCH /devices/{device_id}/status
	PatchDeviceStatus(ctx context.Context, req OptDevicesDeviceStatusUpdate, params PatchDeviceStatusParams) (PatchDeviceStatusRes, error)
	// PatchJob implements patch_job operation.
	//
	// Used by device to set job status to "running".<br/>Other statuses are set by CloudAPI
	// automatically when result is created.
	//
	// PATCH /jobs/{job_id}/status
	PatchJob(ctx context.Context, req OptJobsJobStatusUpdate, params PatchJobParams) (PatchJobRes, error)
	// PatchJobInfo implements patch_job_info operation.
	//
	// Used by device to set results or error details in job_info„ÄÅaccompanied by appropriate status
	// updating.
	// Note that job info descriptor (sampling, estimation, etc) cannot be modified.
	//
	// PATCH /jobs/{job_id}/job_info
	PatchJobInfo(ctx context.Context, req OptJobsUpdateJobInfoRequest, params PatchJobInfoParams) (PatchJobInfoRes, error)
	// PatchSselog implements patch_sselog operation.
	//
	// Upload SSE log file of selected job.
	//
	// PATCH /jobs/{job_id}/sselog
	PatchSselog(ctx context.Context, req OptJobsUploadSselogRequestMultipart, params PatchSselogParams) (PatchSselogRes, error)
	// UpdateJobTranspilerInfo implements update_job_transpiler_info operation.
	//
	// Overwrite selected quantum job's transpiler_info.
	//
	// PUT /jobs/{job_id}/transpiler_info
	UpdateJobTranspilerInfo(ctx context.Context, req OptJobsUpdateJobTranspilerInfoRequest, params UpdateJobTranspilerInfoParams) (UpdateJobTranspilerInfoRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
